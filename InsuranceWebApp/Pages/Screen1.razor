@page "/screen1"

@inject NavigationManager NavManager
@inject ProtectedSessionStorage session 

@using InsuranceWebApp.Data
@using Blazored.FluentValidation

@if (payload == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <h3>Member Details - Step 1</h3>
    <hr />
    <div class="container">
        <EditForm Model="payload.memberDetail" OnValidSubmit="SubmitValidFormAsync">
            <FluentValidationValidator />
            <div class="form-group row">
                <label class="col-3 col-form-label control-label">@Helpers.GetDisplayName(nameof(payload.memberDetail.Name), typeof(MemberDetail))</label>
                <div class="col-3" title=@Helpers.GetDisplayDescription(nameof(payload.memberDetail.Name), typeof(MemberDetail))>
                    <InputText class="form-control" @bind-Value="payload.memberDetail.Name" />
                    <ValidationMessage For="@(() => payload.memberDetail.Name)" />
                </div>
                <div class="col-6"></div>
            </div>
            <div class="form-group row">
                <label class="col-3 col-form-label control-label">@Helpers.GetDisplayName(nameof(payload.memberDetail.Age), typeof(MemberDetail))</label>
                <div class="col-3" title=@Helpers.GetDisplayDescription(nameof(payload.memberDetail.Age), typeof(MemberDetail))>
                    <InputNumber class="form-control" @bind-Value="payload.memberDetail.Age" />
                    <ValidationMessage For="@(() => payload.memberDetail.Age)" />
                </div>
                <div class="col-6"></div>
            </div>
            <div class="form-group row">
                <label class="col-3 col-form-label control-label">@Helpers.GetDisplayName(nameof(payload.memberDetail.DOB), typeof(MemberDetail))</label>
                <div class="col-3" title=@Helpers.GetDisplayDescription(nameof(payload.memberDetail.DOB), typeof(MemberDetail))>
                    <InputDate class="form-control" @bind-Value="payload.memberDetail.DOB" />
                    <ValidationMessage For="@(() => payload.memberDetail.DOB)" />
                </div>
                <div class="col-6"></div>
            </div>
            <div class="form-group row">
                <div class="d-grid gap-2">
                    <button class="btn btn-primary mb-2" type="submit">Next</button>
                    <button class="btn btn-primary mb-2" @onclick="BackToMainPage" type="button" @onclick:stopPropagation="true">Cancel</button>
                </div>
                <div class="col-10"></div>
            </div>
        </EditForm>
    </div>
}

@code {

    private InsuranceDetail payload;

    protected override async Task OnInitializedAsync()
    {
        payload = new InsuranceDetail()
        {
            memberDetail = new Data.MemberDetail(),
            memberInsurance = new Data.MemberInsurance()
        };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var result = await session.GetAsync<InsuranceDetail>("insuranceDetails");

            if (result.Success)
            {
                payload = result.Value;
            }
            else
            {
                payload = new InsuranceDetail()
                {
                    memberDetail = new Data.MemberDetail(),
                    memberInsurance = new Data.MemberInsurance()
                };
            }
            this.StateHasChanged();
        }
    }

    private async void BackToMainPage()
    {
        await session.DeleteAsync("insuranceDetails");
        NavManager.NavigateTo($"/");
    }

    private async Task SubmitValidFormAsync()
    {
        await session.SetAsync("insuranceDetails", payload);
        NavManager.NavigateTo($"screen2/");
    }
}
